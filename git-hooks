#!/bin/bash

# Get the root directory of the git repository
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null)

if [ $? -ne 0 ]; then
  echo "Error: Not inside a Git repository."
  exit 1
fi

HOOKS_DIR="$REPO_ROOT/.githooks"
GIT_HOOKS_DIR="$REPO_ROOT/.git/hooks"
TRACKER_SUFFIX="_hooks.txt"

# Ensure .githooks directory exists and create trigger subdirectories if they don't exist
setup_directories() {
  mkdir -p "$HOOKS_DIR"
  for trigger in pre-commit commit-msg post-commit pre-push; do
    mkdir -p "${HOOKS_DIR}/${trigger}"
  done
  echo "*${TRACKER_SUFFIX}" > "${HOOKS_DIR}/.gitignore"
}

# Write to .git/hooks/trigger to ensure it runs git-hook run trigger
setup_git_hooks() {
  for trigger in pre-commit commit-msg post-commit pre-push; do
    local git_hook_file="${GIT_HOOKS_DIR}/${trigger}"
    echo "#!/bin/bash" > "$git_hook_file"
    echo "git hooks run $trigger" >> "$git_hook_file"
    chmod +x "$git_hook_file"
  done
}

activate() {
    if [ -n "$2" ]; then
        activate_hook "$1" "$2"
    else
        activate_all $1
    fi
}

# Activate a single script for a given trigger
activate_hook() {
  local trigger="$1"
  local script="$2"
  local tracker_file="${HOOKS_DIR}/${trigger}${TRACKER_SUFFIX}"

  # Ensure the tracker file exists
  mkdir -p "$(dirname "$tracker_file")"
  touch "$tracker_file"

  # Add the script to the tracker file if it's not already there
  if ! grep -Fxq "$script" "$tracker_file"; then
    echo "$script" >> "$tracker_file"
    echo "activated ${script} for ${trigger}."
  else
    echo "${script} is already activated for ${trigger}."
  fi
}

# Activate all hooks for a given trigger
activate_all() {
  local trigger="$1"
  for script in $(find "${HOOKS_DIR}/$trigger" -type f -depth 1 | xargs -L 1 basename); do
    activate_hook "$trigger" "$script"
  done
}

deactivate_hook() {
  local trigger="$1"
  local script="$2"
  local tracker_file="${HOOKS_DIR}/${trigger}${TRACKER_SUFFIX}"

  if [ ! -f "$tracker_file" ]; then
    echo "No scripts activated for ${trigger}."
    return
  fi

  # Remove the script from the tracker file
  sed -i.bak "\|$script|d" "$tracker_file" && rm "${tracker_file}.bak"
  echo "deactivated ${script} from ${trigger}."
}

deactivate_all() {
  local trigger="$1"
  for script in $(find "${HOOKS_DIR}/$trigger" -type f -depth 1 | xargs -L 1 basename); do
    deactivate_hook "$trigger" "$script"
  done
}

deactivate() {
    if [ -n "$2" ]; then
        deactivate_hook "$1" "$2"
    else
        deactivate_all $1
    fi
}

list_hooks() {
  for trigger in pre-commit commit-msg post-commit pre-push; do
    if [ ! -z "$(ls -A ${HOOKS_DIR}/$trigger)" ]; then
        echo "$trigger"
        for item in $(ls "${HOOKS_DIR}/$trigger"); do
            echo "    $item"
        done
        echo ""
    fi
  done
}

list_active() {
    for tracker_file in $(find ${HOOKS_DIR}/*${TRACKER_SUFFIX}); do
        cat $tracker_file
    done
}

arrange_hooks() {
  local trigger="$1"
  local tracker_file="${HOOKS_DIR}/${trigger}${TRACKER_SUFFIX}"
  $EDITOR "$tracker_file"
}

run_hooks() {
  local trigger="$1"
  local tracker_file="${HOOKS_DIR}/${trigger}${TRACKER_SUFFIX}"

  if [ ! -f "$tracker_file" ] || [ ! -s "$tracker_file" ]; then
    echo "No scripts activated for ${trigger}."
    return
  fi

  # Execute each script listed in the tracker file
  while IFS= read -r script; do
    if [ -x "$HOOKS_DIR/$trigger/$script" ]; then
      "$HOOKS_DIR/$trigger/$script"
      if [ $? -ne 0 ]; then
        echo "Hook ${script} failed for ${trigger}."
        exit 1
      fi
    else
      echo "Script ${script} is not executable."
    fi
  done < "$tracker_file"
}

setup() {
  setup_directories
  setup_git_hooks
  echo "Git hooks setup completed."
}

case "$1" in
  arrange)
    arrange_hooks "$2"
    ;;
  activate)
    activate "$2" "$3"
    ;;
  deactivate)
    deactivate "$2" "$3"
    ;;
  list)
    list_hooks
    ;;
  list-active)
    list_active
    ;;
  run)
    run_hooks "$2"
    ;;
  setup)
    setup
    ;;
  *)
    echo "Usage: $0 {activate|deactivate|list|run|setup} <trigger> <script>"
    exit 1
    ;;
esac

