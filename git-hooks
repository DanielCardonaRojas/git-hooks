#!/bin/bash

# Get the root directory of the git repository
REPO_ROOT=$(git rev-parse --show-toplevel 2>/dev/null)

# if [ $? -ne 0 ]; then
#   echo "Error: Not inside a Git repository."
#   exit 1
# fi

HOOKS_DIR="$REPO_ROOT/.githooks"
GIT_HOOKS_DIR="$REPO_ROOT/.git/hooks"
TRACKER_SUFFIX="_hooks.txt"
CLONE_DIR="${GIT_HOOKS_INSTALL:-$HOME/.local/share/git-hooks/}"
PROGRAM=$(basename $0)

show_help() {
    echo "Usage: $PROGRAM <command> [options]"
    echo
    echo "Commands:"
    echo "  arrange      Arrange hooks for a given trigger"
    echo "  activate     Activate a script for a given trigger"
    echo "  deactivate   Deactivate a script for a given trigger"
    echo "  list         List all hooks"
    echo "  list-active  List all active hooks"
    echo "  run          Run hooks for a given trigger"
    echo "  init         Setup git hooks"
    echo "  scaffold     Scaffold hooks directory"
    echo "  install      Install hooks from a repository"
    echo "  use          Import contributed hook"
    echo
    echo "Options:"
    echo "  -h, --help   Show this help message"
    echo
    echo "Run '$0 <command> --help' for more information on a command."
}

show_arrange_help() {
    echo "Usage: $PROGRAM arrange <trigger>"
    echo "Arrange hooks for a given trigger."
    echo "Options:"
    echo "  -h, --help   Show this help message"
}

show_activate_help() {
    echo "Usage: $PROGRAM activate <trigger> <script>"
    echo "Activate a script for a given trigger."
    echo "Options:"
    echo "  -h, --help   Show this help message"
}

show_deactivate_help() {
    echo "Usage: $PROGRAM deactivate <trigger> <script>"
    echo "Deactivate a script for a given trigger."
    echo "Options:"
    echo "  -h, --help   Show this help message"
}

show_list_help() {
    echo "Usage: $PROGRAM list"
    echo "List all hooks."
    echo "Options:"
    echo "  -h, --help   Show this help message"
}

show_list_active_help() {
    echo "Usage: $PROGRAM list-active"
    echo "List all active hooks."
    echo "Options:"
    echo "  -h, --help   Show this help message"
}

show_run_help() {
    echo "Usage: $PROGRAM run <trigger>"
    echo "Run hooks for a given trigger."
    echo "Options:"
    echo "  -h, --help   Show this help message"
}

show_init_help() {
    echo "Usage: $PROGRAM init"
    echo "Setup git hooks."
    echo "Options:"
    echo "  -h, --help   Show this help message"
}

show_scaffold_help() {
    echo "Usage: $PROGRAM scaffold [directory]"
    echo "Scaffold hooks directory."
    echo "Options:"
    echo "  -h, --help   Show this help message"
}

show_install_help() {
    echo "Usage: $PROGRAM install <repo_url>"
    echo "Install hooks from a repository."
    echo "Options:"
    echo "  -h, --help   Show this help message"
}

show_use_help() {
    echo "Usage: $PROGRAM use <hook_location>"
    echo "Import contributed hook."
    echo "Options:"
    echo "  -h, --help   Show this help message"
}

install() {
    local repo_url="$1"
    # If clone dir does not exist create
    if [ ! -d "$CLONE_DIR" ]; then
        mkdir -p "$CLONE_DIR"
    fi
    # Clone the repository into the specified directory
    git -C "$CLONE_DIR" clone "$repo_url"
}

# Ensure .githooks directory exists and create trigger subdirectories if they don't exist
setup_directories() {
  local scaffold_dir="$1"
  mkdir -p "$scaffold_dir"
  for trigger in pre-commit commit-msg post-commit pre-push; do
    mkdir -p "${scaffold_dir}/${trigger}"
  done
  echo "*${TRACKER_SUFFIX}" > "${scaffold_dir}/.gitignore"
}

# Write to .git/hooks/trigger to ensure it runs git-hook run trigger
setup_git_hooks() {
  for trigger in pre-commit commit-msg post-commit pre-push; do
    local git_hook_file="${GIT_HOOKS_DIR}/${trigger}"
    echo "#!/bin/zsh" > "$git_hook_file"
    echo "git hooks run $trigger" >> "$git_hook_file"
    chmod +x "$git_hook_file"
  done
}

activate() {
    local trigger="$1"
    local script="$2"
    if [ -n "$script" ]; then
        activate_hook "$trigger" "$script"
    else
        activate_all "$trigger"
    fi
}

# Activate a single script for a given trigger
activate_hook() {
  local trigger="$1"
  local script="$2"
  local tracker_file="${HOOKS_DIR}/${trigger}${TRACKER_SUFFIX}"
  local script_path="${HOOKS_DIR}/${trigger}/${script}"

  # Make script_path executable if not
  if [ ! -x "$script_path" ]; then
    chmod +x "$script_path"
  fi

  # Ensure the tracker file exists
  mkdir -p "$(dirname "$tracker_file")"
  touch "$tracker_file"

  # Add the script to the tracker file if it's not already there
  if ! grep -Fxq "$script" "$tracker_file"; then
    echo "$script" >> "$tracker_file"
    echo "activated ${script} for ${trigger}."
  else
    echo "${script} is already activated for ${trigger}."
  fi
}

# Activate all hooks for a given trigger
activate_all() {
  local trigger="$1"
  for script in $(find "${HOOKS_DIR}/$trigger" -type f -depth 1 | xargs -L 1 basename); do
    activate_hook "$trigger" "$script"
  done
}

deactivate_hook() {
  local trigger="$1"
  local script="$2"
  local tracker_file="${HOOKS_DIR}/${trigger}${TRACKER_SUFFIX}"

  if [ ! -f "$tracker_file" ]; then
    echo "No scripts activated for ${trigger}."
    return
  fi

  # Remove the script from the tracker file
  sed -i.bak "\|$script|d" "$tracker_file" && rm "${tracker_file}.bak"
  echo "deactivated ${script} from ${trigger}."
}

deactivate_all() {
  local trigger="$1"
  for script in $(find "${HOOKS_DIR}/$trigger" -type f -depth 1 | xargs -L 1 basename); do
    deactivate_hook "$trigger" "$script"
  done
}

deactivate() {
  local trigger="$1"
  local script="$2"
  if [ -n "$script" ]; then
      deactivate_hook "$trigger" "$script"
  else
      deactivate_all "$trigger"
  fi
}

list_hooks() {
  for trigger in pre-commit commit-msg post-commit pre-push; do
    if [ ! -z "$(ls -A ${HOOKS_DIR}/$trigger)" ]; then
        echo "$trigger"
        for item in $(ls "${HOOKS_DIR}/$trigger"); do
            echo "    $item"
        done
        echo ""
    fi
  done
}

list_active() {
    for tracker_file in $(find ${HOOKS_DIR}/*${TRACKER_SUFFIX}); do
        cat $tracker_file
    done
}

arrange_hooks() {
  local trigger="$1"
  local tracker_file="${HOOKS_DIR}/${trigger}${TRACKER_SUFFIX}"
  $EDITOR "$tracker_file"
}

run_hooks() {
  local trigger="$1"
  local tracker_file="${HOOKS_DIR}/${trigger}${TRACKER_SUFFIX}"

  if [ ! -f "$tracker_file" ] || [ ! -s "$tracker_file" ]; then
    echo "No scripts activated for ${trigger}."
    return
  fi

  # Execute each script listed in the tracker file
  while IFS= read -r script; do
    if [ -x "$HOOKS_DIR/$trigger/$script" ]; then
      "$HOOKS_DIR/$trigger/$script"
      if [ $? -ne 0 ]; then
        echo "Hook ${script} failed for ${trigger}."
        exit 1
      fi
    else
      echo "Script ${script} is not executable."
    fi
  done < "$tracker_file"
}

setup() {
  setup_directories "$HOOKS_DIR"
  setup_git_hooks
  echo "Git hooks setup completed."
}

# Bring a user or contrib scoped hook into the current repo directory
import_contributed() {
    local hook_location="$1"
    local trigger=$(echo "$hook_location" | xargs dirname | xargs basename)
    local hook_name=$(echo "$hook_location" | xargs basename)
    cp "$CLONE_DIR/$hook_location" "$HOOKS_DIR/$trigger/$hook_name"
}

use() {
    # If no .githooks directory than initialize
    if [ ! -d "$HOOKS_DIR" ]; then
        setup
    fi

    import_contributed "$1"
}

parse_options() {
    local cmd_help_function="$1"
    shift
    OPTIONS=$(getopt -o h --long help -- "$@")
    if [ $? -ne 0 ]; then $cmd_help_function; exit 1; fi
    eval set -- "$OPTIONS"
    while true; do
        case "$1" in
            -h|--help) $cmd_help_function; exit 0;;
            --) shift; break;;
        esac
    done
}

# Main command dispatcher
case "$1" in
    arrange)
        parse_options show_arrange_help "$@"
        arrange_hooks "$2"
        ;;
    activate)
        parse_options show_activate_help "$@"
        activate "$2" "$3"
        ;;
    deactivate)
        parse_options show_deactivate_help "$@"
        deactivate "$2" "$3"
        ;;
    list)
        parse_options show_list_help "$@"
        list_hooks
        ;;
    list-active)
        parse_options show_list_active_help "$@"
        list_active
        ;;
    run)
        parse_options show_run_help "$@"
        run_hooks "$2"
        ;;
    init)
        parse_options show_init_help "$@"
        setup
        ;;
    scaffold)
        parse_options show_scaffold_help "$@"
        setup_directories "${2:-$(pwd)}"
        ;;
    install)
        parse_options show_install_help "$@"
        install "$2"
        ;;
    use)
        parse_options show_use_help "$@"
        use "$2"
        ;;
    *)
        show_help
        exit 1
        ;;
esac

